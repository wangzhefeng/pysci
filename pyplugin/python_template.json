{
    // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "PYTHON": {
        "prefix": "python",
        "body": [
            "# -*- coding: utf-8 -*-",
            "",
            "# ***************************************************",
            "# * File        : $TM_FILENAME",
            "# * Author      : Zhefeng Wang",
            "# * Email       : wangzhefengr@163.com",
            "# * Date        : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
            "# * Version     : 0.1.$CURRENT_MONTH$CURRENT_DATE$CURRENT_HOUR",
            "# * Description : description",
            "# * Link        : link",
            "# * Requirement : 相关模块版本需求(例如: numpy >= 2.1.0)",
            "# ***************************************************",
            "",
            "# python libraries",
            "import os",
            "import sys",
            "ROOT = os.getcwd()",
            "if str(ROOT) not in sys.path:",
            "    sys.path.append(str(ROOT))",
            "",
            "# global variable",
            "LOGGING_LABEL = __file__.split('/')[-1][:-3]",
            // "GLOBAL_VARIABLE = None",
            "",
            "",
            "${1}",
            // "\n",
            // "def func():",
            // "	pass",
            // "\n",
            // "class DemoClass:",
            // "	\"\"\"",
            // "	类说明文档",
            // "	\"\"\"",
            // "	_class_config_param = None  # 类私有不变量",
            // "\t",
            // "	def __init__(self, id_):",
            // "		self.id = id_",
            // "		self.param_a = None  # 类公开变量",
            // "		self._internal_param = None  # 类私有变量",
            // "\t",
            // "	def ClassDemoFunc(self):",
            // "		\"\"\"",
            // "		类普通方法",
            // "		\"\"\"",
            // "		pass",
            // "\t",
            // "	def _ClassPrivateFunc(self):",
            // "		\"\"\"",
            // "		类私有方法",
            // "		\"\"\"",
            // "		pass",
            // "\n",
            // "class _PrivateDemoClass:",
            // "	\"\"\"",
            // "	私有类",
            // "	\"\"\"",
            // "\t",
            // "	def __init__(self):",
            // "		pass",
            "\n",
            "\n",
            "# 测试代码 main 函数",
            "def main():",
            "	pass",
            "",
            "if __name__ == \"__main__\":",
            "	main()",
            ""
        ],
    },
    "PYSCI": {
        "prefix": "sci",
        "body": [
            "import numpy as np",
            "import pandas as pd",
            "\n",
        ],
        "description": "生成 python 科学库 import"
    },
    "HEADER_COMMENT": {
        "prefix": "line",
        "body": [
            "# ------------------------------",
            "# ",
            "# ------------------------------",
        ],
        "description": "生成 python 科学库 import"
    },
    "TIMEFORMAT": {
        "prefix": "timefmt",
        "body": [
            "\"%Y-%m-%d %H:%M:%S\"",
        ],
        "description": "生成 time 格式"
    },
    "HEADER": {
        "prefix": "header",
        "body": [
            "# -*- coding: utf-8 -*-",
            "",
            "# ***************************************************",
            "# * File        : $TM_FILENAME",
            "# * Author      : Zhefeng Wang",
            "# * Email       : wangzhefengr@163.com",
            "# * Date        : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
            "# * Version     : 0.1.$CURRENT_MONTH$CURRENT_DATE$CURRENT_HOUR",
            "# * Description : description",
            "# * Link        : link",
            "# * Requirement : 相关模块版本需求(例如: numpy >= 2.1.0)",
            "# ***************************************************",
            "",
        ],
        "description": "生成 python 文件注释"
    },
    "TRY": {
        "prefix": "try",
        "body": [
            "try:",
            "    $1",
            "except:",
            "    logging.error(f\"{LOGGING_LABEL} {model_name} \" + \"\\n\" + str(traceback.format_exc()))"
        ],
        "description": "insert log to use"
    },
    "LOG": {
        "prefix": "log",
        "body": [
            "logging.error(f\"{LOGGING_LABEL} {model_name} $1\")",
            "$2"
        ],
        "description": "insert log to use"
    },
    "relative_path": {
        "prefix": "relative_path",
        "body": [
            "import os",
            "import sys",
            "ROOT = os.getcwd()",
            "if str(ROOT) not in sys.path:",
            "    sys.path.append(str(ROOT))",
            "\n",
        ],
        "description": "生成相对引用"
    },
    // "relative_path_out": {
    //     "prefix": "relative_path_out",
    //     "body": [
    //         "import os",
    //         "import sys",
    //         "_path = os.path.abspath(os.path.dirname(__file__))",
    //         "if _path not in sys.path:",
    //         "    sys.path.append(_path)",
    //         "\n",
    //     ],
    //     "description": "生成相对引用"
    // },
    "LOCAL_TEST": {
        "prefix": "localtest",
        "body": [
            "# 测试代码 main 函数",
            "def main():",
            "	pass",
            "",
            "if __name__ == \"__main__\":",
            "	main()",
            ""
        ],
        "description": "生成模块本地测试"
    },
    "Timer Class": {
        "prefix": "timer",
        "body": [
            "class Timer:",
            "    \"\"\"",
            "    运行时间计算",
            "    \"\"\"",
            "    ",
            "    def __init__(self):",
            "        self.start_dt = None",
            "",
            "    def start(self):",
            "        import datetime as dt",
            "        self.start_dt = dt.datetime.now()",
            "",
            "    def stop(self):",
            "        import datetime as dt",
            "        end_dt = dt.datetime.now()",
            "        print(f\"Time taken: {end_dt - self.start_dt}\")",
            "",
        ],
        "description": "生成 Timer 类"
    },
    "Config Class": {
        "prefix": "config_cls",
        "body": [
            "class Config:",
            "    data_path = \"data/$1.csv\"",
            "    timestep = 1  # 时间步长，就是利用多少时间窗口",
            "    feature_size = 1  # 每个步长对应的特征数量",
            "    num_layers = 2  # 网络的层数",
            "    hidden_size = 256  # 网络隐藏层大小",
            "    output_size = 1  # 预测未来 n 个时刻数据",
            "    split_ratio = 0.8  # 训练测试数据分割比例",
            "    target_index = 0  # 预测特征的列索引",
            "    epochs = 10  # 迭代轮数",
            "    batch_size = 32  # 批次大小",
            "    learning_rate = 1e-4  # 学习率",
            "    best_loss = 0  # 记录损失",
            "    model_name = \"TODO\"  # 模型名称",
            "    save_path = f\"saved_models/{model_name}.pth\"  # 最优模型保存路径",
            "",
            "config = Config()",
        ],
        "description": "生成 Config Class"
    },
    "Torch Model Class": {
        "prefix": "model_cls",
        "body": [
            "class Model(nn.Module):",
            "",
            "    def __init__(self, $1) -> None:",
            "        super(Model, self).__init__()",
            "",
            "    def forward(self, x):",
            "        output = x",
            "        return output",
        ],
        "description": "生成 Torch Model Class"
    },
    "Torch Set Seed": {
        "prefix": "seed",
        "body": [
            "fix_seed = 2023",
            "random.seed(fix_seed)",
            "np.random.seed(fix_seed)",
            "torch.manual_seed(fix_seed)",
            "if torch.cuda.is_available():",
            "    torch.cuda.manual_seed_all(fix_seed)",
        ],
        "description": "生成 Torch Model Class"
    },
}