{
    // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "PYTHON": {
        "prefix": "python",
        "body": [
            "# -*- coding: utf-8 -*-",
            "\n",
            "# ***************************************************",
            "# * File        : $TM_FILENAME",
            "# * Author      : Zhefeng Wang",
            "# * Email       : wangzhefengr@163.com",
            "# * Date        : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
            "# * Version     : 0.1.$CURRENT_MONTH$CURRENT_DATE$CURRENT_HOUR",
            "# * Description : description",
            "# * Link        : link",
            "# * Requirement : 相关模块版本需求(例如: numpy >= 2.1.0)",
            "# ***************************************************",
            "\n",
            "# python libraries",
            "import os",
            "import sys",
            "$1",
            "\n",
            "# global variable",
            "LOGGING_LABEL = __file__.split('/')[-1][:-3]",
            "GLOBAL_VARIABLE = None",
            "\n",
            "def func():",
            "	pass",
            "\n",
            "class DemoClass:",
            "	\"\"\"",
            "	类说明文档",
            "	\"\"\"",
            "	_class_config_param = 100  # 类私有不变量",
            "\t",
            "	def __init__(self, id_):",
            "		self.id = id_",
            "		self.param_a = None  # 类公开变量",
            "		self._internal_param = None  # 类私有变量",
            "\t",
            "	def ClassDemoFunc(self):",
            "		\"\"\"",
            "		类普通方法",
            "		\"\"\"",
            "		pass",
            "\t",
            "	def _ClassPrivateFunc(self):",
            "		\"\"\"",
            "		类私有方法",
            "		\"\"\"",
            "		pass",
            "\n",
            "class _PrivateDemoClass:",
            "	\"\"\"",
            "	私有类",
            "	\"\"\"",
            "\t",
            "	def __init__(self):",
            "		pass",
            "\n",
            "\n",
            "# 测试代码 main 函数",
            "def main():",
            "	pass",
            "\n",
            "if __name__ == \"__main__\":",
            "	main()",
            "\n"
        ],
    },
    "HEADER": {
        "prefix": "header",
        "body": [
            "# -*- coding: utf-8 -*-",
            "\n",
            "# ***************************************************",
            "# * File        : $TM_FILENAME",
            "# * Author      : Zhefeng Wang",
            "# * Email       : wangzhefengr@163.com",
            "# * Date        : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
            "# * Version     : 0.1.$CURRENT_MONTH$CURRENT_DATE$CURRENT_HOUR",
            "# * Description : description",
            "# * Link        : link",
            "# * Requirement : 相关模块版本需求(例如: numpy >= 2.1.0)",
            "# ***************************************************",
            "\n",
        ],
        "description": "生成 python 文件注释"
    },
    "TRY": {
        "prefix": "try",
        "body": [
            "try:",
            "    $1",
            "except:",
            "    logging.error(f\"{LOGGING_LABEL} {model_name} \" + \"\\n\" + str(traceback.format_exc()))"
        ],
        "description": "insert log to use"
    },
    "LOG": {
        "prefix": "log",
        "body": [
            "logging.error(f\"{LOGGING_LABEL} {model_name} $1\")",
            "$2"
        ],
        "description": "insert log to use"
    },
    "relative_path_in": {
        "prefix": "relative_path_in",
        "body": [
            "import os",
            "import sys",
            "_path = os.path.abspath(os.path.dirname(__file__))",
            "if os.path.join(_path, \"..\") not in sys.path:",
            "    sys.path.append(os.path.join(_path, \"..\"))",
            "\n",
        ],
        "description": "生成相对引用"
    },
    "relative_path_out": {
        "prefix": "relative_path_out",
        "body": [
            "import os",
            "import sys",
            "_path = os.path.abspath(os.path.dirname(__file__))",
            "if _path not in sys.path:",
            "    sys.path.append(_path)",
            "\n",
        ],
        "description": "生成相对引用"
    },
    "LOCAL_TEST": {
        "prefix": "localtest",
        "body": [
            "# 测试代码 main 函数",
            "def main():",
            "	pass",
            "\n",
            "if __name__ == \"__main__\":",
            "	main()",
            "\n"
        ],
        "description": "生成模块本地测试"
    },
    "TENSORFLOW": {
        "prefix": "tf_pg",
        "body": [
            "import tensorflow as tf",
            "from tensorflow import keras",
            "\n",
        ],
        "description": "tensorflow package 载入"
    },
}