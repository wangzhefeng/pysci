
Python 列表、字典解析、生成器
=============================

- 前提条件：了解 Python 迭代协议


1.列表解析
-----------------------

- 与 ``for`` 循环一起使用，列表解析是最常用的迭代协议的环境之一

- 当我们开始考虑在一个序列中的每项上执行一个操作时，都可以考虑使用列表解析

- 列表解析的优点：

    - 列表解析编写起来更加精简

    - 由于构建结果列表的这种代码样式在 Python 代码中十分常见，因此可以将他们用于多种环境

    - 列表解析比手动的 for 循环语句运行地更快(往往速度快一倍)，因为他们的迭代在解析器内部是以 C 
      语言的速度执行的，而不是以手动 Python 代码执行的，特别是对于较大的数据集合，
      这是使用列表解析的一个主要的性能优点



1.1 列表解析基础知识
~~~~~~~~~~~~~~~~~~~~~~~

在 Python 中，列表解析看上去就像一个反向的 ``for`` 循环, 下面分析一个例子

    .. code-block:: python

        >>> L = [x + 10 for x in L]

其中：

    - ``x + 10``: 任意表达式

    - ``for x in L``: 可迭代对象(for 循环头部)

    - ``[...]``: 列表





1.2 在文件上使用列表解析
~~~~~~~~~~~~~~~~~~~~~~~~

文件对象有个 ``readlines`` 方法，它能一次性地把文件载入到行字符串的一个列表中:

.. code-block:: python

    with open("script1.py") as f:
        lines = f.readlines()
        lines = [line.rstrip() for line in lines]

.. code-block:: python

    lines = [line.rstrip() for line in open("script1.py")]


    




1.3 扩展的列表解析语法
~~~~~~~~~~~~~~~~~~~~~~~~~~

- 表达式中嵌套的 for 循环可以有一个相关的 if 子句，来过滤那些测试不为真的结果项

- 列表解析可以变得复杂，比如，它们可能包含嵌套的循环，也可能被编写为一系列的 for 子句。实际上，它们的完整语法允许任意数目的 for 子句，每个子句有一个可选的相关的 if 子句

.. code-block:: python

    lines = [line.rstrip() for line in open("script1.py") if line[0] == "p"]


.. code-block:: python

    [x + y for x in 'abc' for y in 'lmn']

1.4 列表解析与 ``map``
~~~~~~~~~~~~~~~~~~~~~~~~


1.5 增加测试和嵌套循环
~~~~~~~~~~~~~~~~~~~~~~~~


1.6 列表解析和矩阵
~~~~~~~~~~~~~~~~~~~~~~~~




1.7 理解列表解析
~~~~~~~~~~~~~~~~~~~~~~~~





2.字典解析
-----------------------





3.生成器
------------------------


